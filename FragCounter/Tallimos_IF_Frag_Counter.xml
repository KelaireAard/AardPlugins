<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, June 24, 2021, 1:06 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Tallimos_IF_Frag_Counter" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Tallimos_IF_Frag_Counter"
   author="Tallimos"
   id="e7b8380eaba4b9b8b45a4ea5"
   language="Lua"
   purpose="Displays the number of icefall fragments in your current room"
   save_state="y"
   date_written="2021-06-24 13:05:27"
   requires="4.73"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>
	<trigger
		enabled="n"
		script="IFFragConsiderOff"
		group="epicconsider"
		match="^IFFrag Consider Over$"
		name="IFFragConsiderOff"
		regexp="y"
		sequence="100"
		omit_from_output="y"
		>
	</trigger>
-- Epic Consider Triggers
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?You would stomp (?<mob>.+) into the ground\.$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) would be easy\, but is it even worth the work out\?$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?No Problem\! (?<mob>.+) is weak compared to you\.$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) looks a little worried about the idea\.$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) should be a fair fight\!$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) snickers nervously\.$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) chuckles at the thought of you fighting \b.+\b\.$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"	
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?Best run away from (?<mob>.+) while you can\!$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?Challenging (?<mob>.+) would be either very brave or very stupid\.$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) would crush you like a bug\!$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) would dance on your grave\!$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?(?<mob>.+) says 'BEGONE FROM MY SIGHT unworthy\!'$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
	<trigger
		enabled="n"
		match="^(?:\(.*\) )?You would be completely annihilated by (?<mob>.+)\!$"
		regexp="y"
		group="epicconsider"
		script="Epic_Consider"
		sequence="100"
		omit_from_output="y"
		omit_from_log="y"
		>
	</trigger>
</triggers>

<aliases>
	<alias
		script="IFFragConsiderOn"
		match="^(tif|iffrag|ifrag)$"
		enabled="y"
		ignore_case="y"
		regexp="y"
		sequence="200"
		>
	</alias>
	<alias
		script="tif_help"
		match="^tif help$"
		enabled="y"
		ignore_case="y"
		regexp="y"
		sequence="200"
		>
	</alias>
	<alias
		script="SetReportChannel"
		match="^(?:tif|iffrag|ifrag) (?:report|channel) (.*?)$"
		enabled="y"
		ignore_case="y"
		regexp="y"
		sequence="200"
		>
	</alias>
	<alias
		script="DisplayReportChannel"
		match="^(?:tif|iffrag|ifrag) (?:report|channel)$"
		enabled="y"
		ignore_case="y"
		regexp="y"
		sequence="200"
		>
	</alias>
</aliases>

<!--  Script  -->

<script>

<![CDATA[
require "tprint"
require "mw_theme_base"
require "serialize"
require "commas"
require "gmcphelper"
require "copytable"
require "aardmapper"
require "aard_lua_extras"

----------------------------START OF VARIABLE DECLARATIONS----------------------------

local msg_colour      = "lightslategrey"
local err_colour      = "firebrick"
local help_colour     = "lightslategrey"
local qty_colour      = "cyan"
local optional_colour = "lightcoral"
local command_colour  = "white"
local cmd_required    = "royalblue"
local help_command_colour  = "red"

local noteline = "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

-- GetRoom Variables
local gmcparea = ""
local gmcproomid = 0

-- Icefall Frag Counter Variables
IFFragCount = 0

--------------------------------------------------
------------ REPORT CHANNEL FUNCTIONS ------------
--------------------------------------------------
function SetReportChannel(name, line, wc)
	if wc[1] ~= nil then
		reportchannel = wc[1]
		
		ColourNote (msg_colour, "", "Report Channel has been changed to ", qty_colour, "", wc[1])
	
		SaveState()
	end
end

function DisplayReportChannel()
	if reportchannel == nil or reportchannel == "" then
		ColourNote (err_colour, "", "No Report Channel has been set.")
	else
		ColourNote (msg_colour, "", "Report Channel: ", qty_colour, "", reportchannel)
	end
end

--------------------------------------------------
--------- ICEFALL FRAG COUNTER FUNCTIONS ---------
--------------------------------------------------
function IFFragConsiderOn()
	world.EnableGroup ("epicconsider", 1)
	
	SendNoEcho ("consider")
	SendNoEcho ("echo IFFrag Consider Over")
	
	IFFragCount = 0
end

function IFFragConsiderOff()
	world.EnableGroup ("epicconsider", 0)	
	
	DisplayIFFragConsider()	
end

function DisplayIFFragConsider()
	GetRoom()
	
	local location = ""
	
	if tonumber(gmcproomid) == 38774 then
		location = "0n"
	elseif tonumber(gmcproomid) == 38781 then
		location = "1n"
	elseif tonumber(gmcproomid) == 38788 then
		location = "2n"
	elseif tonumber(gmcproomid) == 38795 then
		location = "3n"
	elseif tonumber(gmcproomid) == 38802 then
		location = "4n"	
	elseif tonumber(gmcproomid) == 38773 then
		location = "1w"
	elseif tonumber(gmcproomid) == 38775 then
		location = "1e"
	end
	
	if location == "" or location == nil then
		ColourNote(err_colour, "", "You are not in one of the seven blocking locations, please move and try again.")
	else
		if IFFragCount  > 0 then
			SendNoEcho (reportchannel .. " @D[@RIcefall@D] @G" .. location .. " @R" .. IFFragCount .. " @Dfrag(s)@w")
		else
			ColourNote(err_colour, "" , "There are currently no fragments in this room.")
		end
	end
end

function Epic_Consider(name, line, wc)
	replacements = { 
		["a"] = "",
		["A"] = "",
		["an"] = "",
		["An"] = "",
		["the"] = "",
		["The"] = "",
		["of"] = "",
		["Of"] = "",
	}
	
	mobname = string.lower(wc[1])
	
	if Trim(mobname) == "an energized ruby fragment" then 			
		IFFragCount = IFFragCount + 1
	end
end

-------------------------------------------
------------ GET ROOM FUNCTION ------------
-------------------------------------------
function GetRoom()
	Send_GMCP_Packet("request room")

	gmcparea = gmcp("room.info.zone")
	gmcproomid = gmcp("room.info.num")	
end

--------------------------------------------------
----------------- HELP FUNCTION  -----------------
--------------------------------------------------
function tif_help()
	local title = "Tallimos' IF2 Frag Counter"
	local title2 = noteline
		
	local leng = tonumber(string.len(title))
	local leng2 = tonumber(string.len(title2))
	
	local spacing = 0
	local lendif = 0
	
	if leng > leng2 then
	else
		lendif = leng2 - leng
		lendif = lendif * 0.5
	end

	spacing = string.rep(" ", lendif)
	
	ColourNote(help_colour, "", spacing, help_command_colour, "", title)
	ColourNote(help_colour, "", noteline)
	
	ColourNote(help_command_colour, "", "tif                 ", help_colour, "", " - counts the number of icefall 2 fragments currently in your room then")
	ColourNote(help_colour, "", "                       displays how many along with your current room. i.e. gt 3n 5")
	
	ColourNote(help_command_colour, "", "tif report <channel>", help_colour, "", " - sets the channel in which you want to display the count")
	
	ColourNote(help_command_colour, "", "tif report          ", help_colour, "", " - displays which channel the user has chosen to display the count")
	
	Note("")
	
	ColourNote("red", "", "PLEASE NOTE:", help_colour, "", " the user can also use ", help_command_colour, "", "iffrag", help_colour, "", " and ", help_command_colour, "", "ifrag", help_colour, "", " in place of tif.")
	
	ColourNote(help_colour, "", noteline)
	Note("")
end	-- tee_help_icefall

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)
	-- Look for GMCP handler.
	if (id == '3e7dedbe37e44942dd46d264') then
		if (text == 'reload') then
			-- invalidate current data
			return
		end
	end
end

function GetSavedData()
	if GetVariable ("ifragpastfirstinstall") == "true" then
		assert (loadstring (GetVariable ("reportchannel") or "")) ()
	else
		reportchannel =  "gt"
	end

	SaveState()
end

function OnPluginInstall ()
	PLUGIN_VERSION  = GetPluginInfo(GetPluginID(), 19)
	PLUGIN_NAME   = GetPluginInfo(GetPluginID(), 1)

	GetSavedData()	

	ColourNote(help_colour, "", "Thank you for installing ", qty_colour, "", "Tallimos' IF2 Frag Counter v" ..  PLUGIN_VERSION, help_colour, "", ". Please see ", help_command_colour, "", "tif help", help_colour, "", " for more information.")
	Note("")
end

function OnPluginEnable()
	GetSavedData()   
end -- OnPluginEnable

function OnPluginSaveState ()
	SetVariable ("reportchannel", "reportchannel = " .. serialize.save_simple (reportchannel))

	SetVariable ("ifragpastfirstinstall", "true")
end -- OnPluginSaveState

]]>
</script>
</muclient>
